buildscript {
    ext {
        springBootVersion = '2.1.5.RELEASE'
        springVersion = "5.1.7.RELEASE"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'net.researchgate.release' version '2.6.0'
    id 'nu.studer.credentials' version '1.0.7'
}

apply plugin: "maven"
apply plugin: 'groovy'

subprojects {
    
    buildscript {}

    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: 'signing'
    apply plugin: 'net.researchgate.release'
    defaultTasks "clean", "build"

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceCompatibility = 1.9

    dependencies {
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
        compile group: 'org.springframework.boot', name: 'spring-boot-devtools'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
        compile group: 'org.springframework.boot', name: 'spring-boot-starter-hateoas'
        
        testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
        testCompile group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.4'
        testCompile group: 'org.spockframework', name: 'spock-spring', version: '1.2-groovy-2.4'
        testCompile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.7'
    }

    // Create a jar with javadoc
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

// Create a jar with soruces
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

// hook all the artifacts under artifacts task
    artifacts {
        archives javadocJar, sourcesJar
    }

    // Signing task
    signing {
        sign configurations.archives
    }

    uploadArchives {

        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                String ossPassword = credentials.ossrhPassword

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                    authentication(userName: ossrhUsername, password: ossPassword)
                }

                snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                    authentication(userName: ossrhUsername, password: ossPassword)
                }

                pom.project {

                    //name 'bloxql'
                    packaging 'jar'
                    // optionally artifactId can be defined here
                    description 'An Api Layer For Aion Blockchain'
                    url 'https://github.com/bloxbean/bloxql'

                    scm {
                        connection 'scm:git:git@github.com:bloxbean/bloxql.git'
                        developerConnection 'scm:git:git@github.com:bloxbean/bloxql.git'
                        url 'https://github.com/bloxbean/bloxql'
                    }

                    licenses {
                        license {
                            name 'MIT License'
                            url 'http://www.opensource.org/licenses/mit-license.php'
                        }
                    }

                    developers {
                        developer {
                            id 'satran004'
                            name 'Satya'
                            email 'satran004@gmail.com'
                        }
                    }
                }
            }
        }
    }
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")


//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.allSource
//}
//
//artifacts {
//    archives javadocJar, sourcesJar
//}
//
//ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
//
//println('8888888888')
//println(isReleaseVersion )
//println(version)
//signing {
//    required { ext.isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
//    sign configurations.archives
//}



